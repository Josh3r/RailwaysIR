{"version":3,"sources":["Components/Tab.js","Components/Tabs.js","App.js","serviceWorker.js","index.js"],"names":["Tab","onClick","props","label","this","activeTab","className","style","cursor","Component","Tabs","onClickTabItem","tab","setState","state","children","map","child","key","require","App","background","color","fontSize","fontWeight","display","flexDirection","alignItems","justifyContent","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOA0CeA,E,2MAhCbC,QAAU,WAAO,IAAD,EACa,EAAKC,MAAxBC,EADM,EACNA,OACRF,EAFc,EACCA,SACPE,I,wEAGA,IAENF,EAKEG,KALFH,QAFK,EAOHG,KAJFF,MACEG,EAJG,EAIHA,UACAF,EALG,EAKHA,MAIAG,EAAY,gBAMhB,OAJID,IAAcF,IAChBG,GAAa,oBAIb,wBACEA,UAAWA,EACXL,QAASA,EAASM,MAAO,CAACC,OAAO,YAGhCL,O,GAjCSM,aCyDHC,E,YAlDb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAORS,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAER,UAAWO,KAN3B,EAAKE,MAAQ,CACXT,UAAW,EAAKH,MAAMa,SAAS,GAAGb,MAAMC,OAJzB,E,sEAYT,IAENQ,EAOEP,KAPFO,eAEEI,EAKAX,KANFF,MACEa,SAGAV,EAEAD,KAHFU,MACET,UAIJ,OACE,6BACE,wBAAIC,UAAU,YACXS,EAASC,KAAI,SAACC,GAAW,IAChBd,EAAUc,EAAMf,MAAhBC,MAER,OACE,kBAAC,EAAD,CACEE,UAAWA,EACXa,IAAKf,EACLA,MAAOA,EACPF,QAASU,QAKjB,yBAAKL,UAAU,eACZS,EAASC,KAAI,SAACC,GACb,GAAIA,EAAMf,MAAMC,QAAUE,EAC1B,OAAOY,EAAMf,MAAMa,kB,GA/CZN,aCDnBU,EAAQ,IA6BOC,MA3Bf,WACE,OACE,yBAAKb,MAAO,CAACc,WAAY,0EACvB,wBAAId,MAAO,CAACe,MAAM,QAAQC,SAAS,OAAOC,WAAW,OAAQC,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,eAAe,WAAtI,wCAEE,yBAAKC,IAAI,wEAEZ,kBAAC,EAAD,CAAMtB,MAAO,CAACkB,QAAQ,OAAOG,eAAe,WAC3C,yBAAKzB,MAAM,cAAX,iBACgB,yCADhB,IAEE,gQAIF,yBAAKA,MAAM,WAAX,iBACgB,yCADhB,KAGA,yBAAKA,MAAM,eAAX,oCACmC,uCADnC,QCXc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6c6ffad7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Tab extends Component {\r\n  static propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClick,\r\n      props: {\r\n        activeTab,\r\n        label,\r\n      },\r\n    } = this;\r\n\r\n    let className = 'tab-list-item';\r\n\r\n    if (activeTab === label) {\r\n      className += ' tab-list-active';\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className={className}\r\n        onClick={onClick} style={{cursor:'pointer'}\r\n        }\r\n      >\r\n        {label}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tab from './Tab';\r\n\r\nclass Tabs extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.instanceOf(Array).isRequired,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTab: this.props.children[0].props.label,\r\n    };\r\n  }\r\n\r\n  onClickTabItem = (tab) => {\r\n    this.setState({ activeTab: tab });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClickTabItem,\r\n      props: {\r\n        children,\r\n      },\r\n      state: {\r\n        activeTab,\r\n      }\r\n    } = this;\r\n\r\n    return (\r\n      <div >\r\n        <ol className=\"tab-list\">\r\n          {children.map((child) => {\r\n            const { label } = child.props;\r\n\r\n            return (\r\n              <Tab\r\n                activeTab={activeTab}\r\n                key={label}\r\n                label={label}\r\n                onClick={onClickTabItem}\r\n              />\r\n            );\r\n          })}\r\n        </ol>\r\n        <div className=\"tab-content\">\r\n          {children.map((child) => {\r\n            if (child.props.label !== activeTab) return undefined;\r\n            return child.props.children;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabs;","import React from 'react';\r\nimport { render } from \"react-dom\";\r\n\r\nimport Tabs from './Components/Tabs';\r\nrequire('./styles.css');\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={{background: 'linear-gradient(0deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)'}}>\r\n      <h1 style={{color:'black',fontSize:'40px',fontWeight:'bold' ,display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center'}}>\r\n        Railways in the Industrail Revolution\r\n        <img src='https://railwaywondersoftheworld.com/wpimages/wp45737414_05_06.jpg'></img>\r\n      </h1>\r\n     <Tabs style={{display:'flex',justifyContent:'center'}}>\r\n      <div label=\"Background\">\r\n        See ya later, <em>Alligator</em>!\r\n        <p>\r\n          Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aut, debitis laborum. Eius enim tenetur inventore ad, laboriosam soluta. Vero architecto similique voluptas natus non dolor, itaque odit aliquam excepturi laudantium.\r\n        </p>\r\n      </div>\r\n      <div label=\"Britain\">\r\n        After 'while, <em>Crocodile</em>!\r\n      </div>\r\n      <div label=\"Netherlands\">\r\n        Nothing to see here, this tab is <em>extinct</em>!\r\n      </div>\r\n    </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}